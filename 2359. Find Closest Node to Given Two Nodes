class Solution {
    public void dfs(int[] edges,int distance, int[]temp,int node)
    {
        if(node!=-1 && temp[node]==-1)
        {
            temp[node]=distance;
            dfs(edges,distance+1,temp,edges[node]);
        }
    }
    public int closestMeetingNode(int[] edges, int node1, int node2) {
            int temp1[]=new int[edges.length];
            Arrays.fill(temp1,-1);
            int temp2[]=new int[edges.length];Arrays.fill(temp2,-1);
            int mindistance=Integer.MAX_VALUE;
            int ans=-1;
            dfs(edges,0,temp1,node1);
            dfs(edges,0,temp2,node2);
            for(int i=-0;i<temp1.length;i++)
            {
                System.out.println(temp1[i]);
            }
            for(int i=0;i<edges.length;i++)
            {
                if(Math.min(temp1[i],temp2[i])>=0 && Math.max(temp1[i],temp2[i])<mindistance)
                {
                    mindistance= Math.max(temp1[i],temp2[i]);
                    ans=i;
                }
            }
          return ans;
    }
}
