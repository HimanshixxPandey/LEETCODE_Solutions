class Solution {
    public int snakesAndLadders(int[][] board) {
        int steps=0;
        int n=board.length;
        Queue<Integer>q=new LinkedList<Integer>();
        boolean visited[][]=new boolean[n][n];
        visited[n-1][0]=true;
        q.add(1);
        while(q.size()!=0)
        {   
            int size=q.size();
            for(int i=0;i<size;i++)
            {
            int x=q.poll();
            if(x==n*n)
            {
           return steps;
            }
           for(int j=1;j<=6;j++)
           {
            if(j+x>n*n)
            {
             break;
            }
            int pos[]=findcoardinate(j+x,n);
            int r=pos[0];
            int c=pos[1];
            if(visited[r][c]==true)
            continue;
            visited[r][c]=true;
            if(board[r][c]==-1)
           {
             q.add(j+x);
           }
           else
          {
             q.add(board[r][c]);
          }
           }
 }
     steps++;

 }
 return -1;
}


public int[] findcoardinate(int k,int n)
{
    int r=n-(k-1)/n -1;
    int c=(k-1)%n;
    if(r%2==n%2)
        return new int[]{r,n-1-c};
    return new int[]{r,c};
}
    }
